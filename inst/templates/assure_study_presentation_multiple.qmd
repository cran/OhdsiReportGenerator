---
title: "Signal Evaluation Report"
format:
  revealjs: 
    self-contained: true
    scrollable: true
    theme: [default, presentation_style.scss]
    logo: img/logo.png
    title-slide-attributes:
      data-background-color: "#EB1700"
    footer: "ASSURE Standardized report"
    slide-number: true
    show-slide-number: all
    menu:
      side: left
      numbers: true
params: 
  server: NULL
  password: NULL
  username: NULL
  dbms: NULL
  resultsSchema: NULL
  title: NULL
  lead: NULL
  date: NULL
  targetId: NULL
  targetName: NULL
  outcomeIds: NULL
  outcomeNames: NULL
  comparatorIds: NULL
  comparatorNames: NULL
  cmSubsetId: NULL
  sccsSubsetId: NULL
  indicationName: NULL
  covariateIds: NULL
  details: NULL
  evaluationText: NULL
  runSCCS: NULL
---

## Signal Evaluation Overview

```{r}
#| label: setup
#| echo: false
#| hide: true

defaultPageSize <- 10

library(reactable)
library(dplyr)
resultsSchema <- params$resultsSchema
server <- params$server
username <- params$username
password <- params$password
dbms <- params$dbms

# connect
connectionDetails <- DatabaseConnector::createConnectionDetails(
  server = server,
    user = username,
    password = password,
    dbms = dbms
)
connectionHandler <- ResultModelManager::ConnectionHandler$new(
  connectionDetails = connectionDetails
  )

runSCCS <- F #params$runSCCS == 'yes'

cmSubsetId <- params$cmSubsetId
sccsSubsetId <- params$sccsSubsetId
indicationName <- params$indicationName

outcomeIds <- unlist(params$outcomeIds)
outcomeNames <- unlist(params$outcomeNames)

# if a subset is specified then update the ids - run for all subsets?
targetId <- params$targetId
targetName <- params$targetName
comparatorIds <- unlist(params$comparatorIds)
comparatorNames <- unlist(params$comparatorNames)
if(!is.null(cmSubsetId)){
 targetId <- targetId*1000 + cmSubsetId 
 comparatorIds <- comparatorIds*1000 + cmSubsetId 
}
sccsTargetId <- params$targetId
if(!is.null(sccsSubsetId)){
 sccsTargetId  <- targetId*1000 + sccsSubsetId 
}

studyPeriod <- params$details$studyPeriod
restrictions <- params$details$restrictions

evaluationText <- params$evaluationText

# get databases
dbs <- OhdsiReportGenerator:::getDbs(
  schema = resultsSchema,
  connectionHandler = connectionHandler
)


# If this first initialization isn't run, tabs won't print
reactable::reactable(data.frame(Study = "Multiple comparators and/or multiple outcomes."))

```


```{r}
#| label: summary
#| echo: false
#| results: 'asis'

cat('\n\n:::: {.columns}')
cat('\n\n::: {.column width="50%"}')
cat(paste0('\n\n> Target: ', targetName,' @sec-target'))

cat(paste0('\n\n> Comparators: ',paste0(comparatorNames, ' @sec-',OhdsiReportGenerator::removeSpaces(comparatorNames), collapse =', ')))

if(!is.null(sccsSubsetId)){
cat(paste0('\n\n> Indication: ', subsetName,' @sec-indication'))
}

cat(paste0('\n\n> Outcomes: ', paste0(outcomeNames, ' @sec-',OhdsiReportGenerator::removeSpaces(outcomeNames), collapse =', ')))
cat('\n\n:::')

cat('\n\n::: {.column width="10%"}')
cat('\n\n<!-- empty column to create gap -->')
cat('\n\n:::')

cat('\n\n::: {.column width="40%"}')
cat('\n\n::: {.border}')
cat('\n\n::: {style="font-size: 50%;"}')

cat('\n\n| Study Period: ')
cat(paste0('\n| ', studyPeriod))

cat('\n\n| Restrictions:') 
cat(paste0('\n| ', restrictions))

cat('\n\n| Analytic Methods:') 
cat('\n|   * Characterization')
cat('\n|   * Propensity-matched comparative cohort on treatment')
cat('\n|   * Self-controlled case series (SCCS)')
cat('\n|   * Patient-level prediction')

cat('\n\n| Databases: ')
cat(paste0('\n|   *  ', dbs[['us claims']], ' US Claims'))
cat(paste0('\n|   *  ', dbs[['us ehr']], '  US EHR'))
cat(paste0('\n|   *  ', dbs[['non-us claims']], '  Non-US Claims'))

cat('\n\n:::')
cat('\n\n:::')
cat('\n\n:::')

cat('\n\n::::')

cat(paste0('\n\n::: footer
', paste0(params$title, ' - ', params$lead, ' - ', as.character(params$date))))

cat('\n\n:::')

```

# Characterization {.break-slides}

## Cohort Incidence

::: {style='font-size: 50%;'}

```{r}
#| label: cohort incidence
#| echo: false
#| results: 'asis'

# add text for outcome tabs
cat('\n:::: {.panel-tabset .nav-pills}')
for(outcomeInd in 1:length(outcomeIds)){
  outcomeId <- outcomeIds[outcomeInd]
  outcomeName <- outcomeNames[outcomeInd]
  
incidence <- OhdsiReportGenerator::getIncidenceRates(
    connectionHandler = connectionHandler,
    schema = resultsSchema,
    targetIds = sccsTargetId,
    outcomeIds = outcomeId
)

if(nrow(incidence) > 0 ){
  # add outcome tab
  cat(paste0('\n\n### ',outcomeName, ' \n\n'))

tars <- OhdsiReportGenerator:::getTars(
  data = incidence
  )

# add text for tabs
cat('\n::: {.panel-tabset .nav-pills}')
for(tar in tars){
  
  idata <- incidence %>% 
    dplyr::filter(
      .data$ageGroupName == 'Any' &
      .data$genderName == 'Any' &
      .data$startYear == 'Any' &
      .data$tarStartWith == tar$tarStartWith  &
      .data$tarStartOffset == tar$tarStartOffset &
      .data$tarEndWith == tar$tarEndWith &
      .data$tarEndOffset ==  tar$tarEndOffset
    ) %>%
    dplyr::select(
      'databaseName',
      #'ageGroupName',
      #'genderName',
      #'startYear',
      'personsAtRisk',
      'personDays',
      'personOutcomes',
      'outcomes',
      'incidenceProportionP100p',
      'incidenceRateP100py'
    )
  
  # if there is data
  if( nrow(idata) > 0 ){
        cat(paste0('\n\n#### TAR: ',paste0('(',tar$tarStartWith, " + ", tar$tarStartOffset, ') - (', tar$tarEndWith, " + ", tar$tarEndOffset, ')'),'\n\n'))
    
    OhdsiReportGenerator::printReactable(
  data = idata, 
columns = list(
  personOutcomes = reactable::colDef(
    cell = function(value) {
    if (value == -5) "< 5" else value
  }
    ),
  outcomes = reactable::colDef(
    cell = function(value) {
    if (value == -5) "< 5" else value
  }
    ),
  incidenceProportionP100p = reactable::colDef(
    format = reactable::colFormat(digits = 2)
    ),
  incidenceRateP100py = reactable::colDef(
    format = reactable::colFormat(digits = 2)
    )
),
 highlight = TRUE, 
 striped = TRUE, 
 defaultPageSize = defaultPageSize
)
cat("\n")
}

}
# end inner tab
cat('\n\n:::')
}
}
# end outer tab
cat('\n\n::::')

```

:::

## Cohort Demographics

::: {style='font-size: 50%;'}

```{r}
#| label: cohort demographics
#| echo: false
#| results: 'asis'
  # add text for outcome tabs
  cat('\n\n:::: {.panel-tabset .nav-pills}')
  for(outcomeInd in 1:length(outcomeIds)){
    outcomeId <- outcomeIds[outcomeInd]
    outcomeName <- outcomeNames[outcomeInd]
    
    ageData <- OhdsiReportGenerator::getCharacterizationDemographics(
      connectionHandler = connectionHandler,
      schema = resultsSchema,
      targetId = sccsTargetId,
      outcomeId = outcomeId,
      type = 'age'
    )
   sexData <- OhdsiReportGenerator::getCharacterizationDemographics(
      connectionHandler = connectionHandler,
      schema = resultsSchema,
      targetId = sccsTargetId,
      outcomeId = outcomeId,
      type = 'sex'
    )
    
    if(nrow(sexData) >0 ){
      # add outcome tab
      cat(paste0('\n\n### ',outcomeName, ' \n\n'))
      
      # loop over tar settings as tabs
      tars <- OhdsiReportGenerator:::getTars(
        data = sexData,  
        tarColumnNames = c(
          'startAnchor', 
          'riskWindowStart',
          'endAnchor',
          'riskWindowEnd'
        )
      )
      
      cat('\n::: {.panel-tabset .nav-pills}')
      for(tar in tars){
        cat(paste0('\n#### TAR: ',paste0('(',tar$startAnchor, " + ", tar$riskWindowStart, ') - (', tar$endAnchor, " + ", tar$riskWindowEnd, ')'),' \n'))
        
        sexPlot <- OhdsiReportGenerator::plotSexDistributions(
          sexData = sexData,
          riskWindowStart = tar$riskWindowStart,
          riskWindowEnd = tar$riskWindowEnd, 
          startAnchor = tar$startAnchor, 
          endAnchor = tar$endAnchor
        )
        agePlot <- OhdsiReportGenerator::plotAgeDistributions(
          ageData = ageData,
          riskWindowStart = tar$riskWindowStart,
          riskWindowEnd = tar$riskWindowEnd, 
          startAnchor = tar$startAnchor, 
          endAnchor = tar$endAnchor
        )
        
        print(
          ggpubr::annotate_figure(
            p = ggpubr::ggarrange(
              sexPlot, 
              agePlot, 
              heights = c(1, 2),
              ncol = 1, 
              nrow = 2,
              labels = c("A", "B") 
            ), 
            fig.lab = "Demographics for patients with outcome during time-at-risk vs patients without outcome during time-at-risk when first exposed.", 
            fig.lab.pos = "bottom.left"
          )
        )
      }
      cat('\n\n:::')
    }
  }
  cat('\n\n::::\n')
```

:::
  
## Cohort Characterization
  
::: {style='font-size: 50%;'}

```{r}
#| label: cohort characterization
#| echo: false
#| results: 'asis'
  # add text for outcome tabs
  cat('\n:::: {.panel-tabset .nav-pills}')
  for(outcomeInd in 1:length(outcomeIds)){
    outcomeId <- outcomeIds[outcomeInd]
    outcomeName <- outcomeNames[outcomeInd]
    
    chars <- OhdsiReportGenerator::getBinaryRiskFactors(
      connectionHandler = connectionHandler,
      schema = resultsSchema,
      targetId = sccsTargetId,
      outcomeId = outcomeId,
      analysisIds = c(201,401,210,410)
    )
    
    if(nrow(chars) > 0 ){
      
      # add outcome tab
      cat(paste0('\n\n### ',outcomeName, ' \n\n'))
      
      tars <- OhdsiReportGenerator:::getTars(
        data = chars,  
        tarColumnNames = c(
          'startAnchor', 
          'riskWindowStart',
          'endAnchor',
          'riskWindowEnd'
        )
      )
      
      cat('\n::: {.panel-tabset .nav-pills}')
      for(tar in tars){
        
        charsData <- chars %>% 
         dplyr::filter(
          .data$startAnchor == !!tar$startAnchor &
          .data$endAnchor == !!tar$endAnchor &
          .data$riskWindowStart == !!tar$riskWindowStart &
          .data$riskWindowEnd == !!tar$riskWindowEnd
         )
        
        
        if(nrow(charsData) > 0 ){
          # only include tab if there are results
          cat(paste0('\n\n#### TAR: ',paste0('(',tar$startAnchor, " + ", tar$riskWindowStart, ') - (', tar$endAnchor, " + ", tar$riskWindowEnd, ')'),' \n\n')) 
          
          #print(
            #htmltools::tagList(
              #reactable::reactable(
          OhdsiReportGenerator::printReactable(
                data = charsData, 
                columns = list(
                  covariateName = reactable::colDef(
                    filterable = TRUE, 
                    minWidth = 300 
                  ),
                 caseAverage = reactable::colDef(
                    aggregate = "mean",
                    name = 'With Outcome',
                    format = reactable::colFormat(digits = 2)
                  ),
                  nonCaseAverage = reactable::colDef(
                    aggregate = "mean",
                    name = 'No Outcome',
                    format = reactable::colFormat(digits = 2)
                  ),
                  SMD = reactable::colDef(
                    aggregate = "mean",
                    name = 'SMD',
                    format = reactable::colFormat(digits = 2)
                  ),
                  absSMD = reactable::colDef(
                    aggregate = "mean",
                    name = 'SMD',
                    format = reactable::colFormat(digits = 2)
                  )
                ),
                groupBy = c('covariateName'), 
                defaultPageSize = defaultPageSize,
                highlight = TRUE, 
                striped = TRUE
              )
            #)
          #)
        }
        
      }
      cat('\n:::')
    }
  }
  cat('\n::::')

```

:::
  
# Causal Inference {.break-slides}
  
## Cohort Method
  
::: {style='font-size: 50%;'}

```{r}
#| label: cohort method 
#| echo: false
#| results: 'asis'

# for each outcome have a tab

# panel for outcomes
cat('\n\n::: {.panel-tabset .nav-pills}')
for(outcomeId in outcomeIds){
  
  outcomeName <- outcomeNames[which(outcomeIds == outcomeId)]
  cat(paste0('\n\n### ', outcomeName))
  
  # panel for diag/table/plot
  cat('\n::::: {.panel-tabset .nav-pills}')  
  cat('\n\n#### Study Diagnostics')
  cat("\n\n:::: {.columns}")
  cat('\n\n::: {.column width="85%"} \n\n')
  
  cmTableDiag <- OhdsiReportGenerator::getCmDiagnosticsData(
    connectionHandler = connectionHandler,
    schema = resultsSchema,
    targetIds = targetId,
    outcomeIds = outcomeId,
    comparatorIds = comparatorIds
  )
  
  if(nrow(cmTableDiag) > 0){
    
    # add table
    OhdsiReportGenerator::printReactable(
          data = cmTableDiag %>%
            dplyr::select(
              "databaseName",
              "analysisId",
              "comparatorName",
              "summaryValue"
            )
          ,
          columns = list(
            databaseName = reactable::colDef(
              name = 'Database'
            ),
            comparatorName = reactable::colDef(
              filterable = TRUE
            ),
            summaryValue = reactable::colDef(
              name = "Overall Diagnostic",
              style = function(value) {
                color <- 'orange'
                if(is.na(value)){
                  color <- 'black'
                }else if(value == 'Pass'){
                  color <- '#AFE1AF'
                }else if(value == 'Fail'){
                  color <- '#E97451'
                }
                list(background = color)
              }
            )
          ), 
          defaultPageSize = defaultPageSize,
          highlight = TRUE, 
          striped = TRUE
        )
  }
  
  cat('\n\n:::')
  cat('\n::: {.column width="15%"}')
  cat('\n\n> Fail: Study failed ASSURE diagnostics')
  cat('\n\n> Pass: Study passed without warnings')
  cat('\n\n> Number: Passed wth Number of warnings')
  # end column
  cat('\n:::')
  # end columns
  cat('\n::::') 
  
  cat('\n\n#### Table Results\n\n')
  
  cmTable <- OhdsiReportGenerator::getCMEstimation(
    connectionHandler = connectionHandler,
    schema = resultsSchema,
    targetIds = targetId,
    outcomeIds = outcomeId, # edit to wrap this
    comparatorIds = comparatorIds
  )
  
  cmMeta <- OhdsiReportGenerator::getCmMetaEstimation(
    connectionHandler = connectionHandler,
    schema = resultsSchema,
    targetIds = targetId,
    outcomeIds = outcomeId, # edit to wrap this
    comparatorIds = comparatorIds
  )
  
  OhdsiReportGenerator::printReactable(
        data = cmTable %>% # ToDo rbind meta?
          dplyr::select(
            'databaseName',
            'comparatorName',
            'description',
            'calibratedRr',
            'calibratedCi95Lb',
            'calibratedCi95Ub',
            'calibratedOneSidedP',
            'calibratedP',
            'calibratedLogRr',
            'calibratedSeLogRr'
          ),
        columns = list(
          comparatorName = reactable::colDef(
            filterable = TRUE
          ),
          calibratedRr = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          ),
          calibratedCi95Lb = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          ),
          calibratedCi95Ub = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          ),
          calibratedOneSidedP = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          ),
          calibratedP = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          ),
          calibratedLogRr = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          ),
          calibratedSeLogRr = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          )
        ),
        defaultPageSize = defaultPageSize,
        highlight = TRUE, 
        striped = TRUE
      )
  
  if(nrow(cmTable)>0){
    cat('\n\n#### Plot Results')
    # add Justin's nice code for cmTable
    # loop over tar
    analyses <- unique(cmTable$description)
    analysisIds <- unique(cmTable$analysisId)
    cmRes <- unique(cmTable[,c('description','analysisId', 'comparatorId')])
    
    # panel for analysis tab
    cat('\n\n::: {.panel-tabset .nav-pills}\n')
    
    for (i in seq_along(analyses)) {
      analysis <- analyses[[i]]
      analysisId <- analysisIds[[i]]
      
      cat(paste0('\n\n##### ', analysis ,'\n\n'))
      
      comps <- cmRes$comparatorId[cmRes$analysisId == analysisId]
      
      for(comparatorId in comps){
        cmdata <- cmTable %>% 
          dplyr::filter(.data$comparatorId == !!comparatorId)
        
        if(nrow(cmdata) > 0 ){
          p <- tryCatch({
            OhdsiReportGenerator::plotCmEstimates(
              cmData = cmdata,
              cmMeta = cmMeta %>% 
                dplyr::filter(.data$comparatorId == !!comparatorId),
              targetName = targetName,
              comparatorName = comparatorNames[comparatorIds == comparatorId], # loop this
              selectedAnalysisId = analysisId
            )},
            error = function(e){return(NULL)}
          )
          
          if(!is.null(p)){
            print(p)
          }
        }
      }
    }
    # end panel for analysis tab
    cat('\n\n:::')
  }
  
  # end panel for diag/table/plot
  cat('\n\n::::')
  
} # end outcome 
# end panel for outcomes
cat('\n\n:::::')

```

:::

## Self Controlled Case Series
  
::: {style='font-size: 50%;'}
::: {.panel-tabset .nav-pills}

### Study Diagnostics
:::: {.columns}

::: {.column width="85%"}

```{r}
#| label: sccs diagostics

if(runSCCS){
  sccsTableDiag <- OhdsiReportGenerator::getSccsDiagnosticsData(
    connectionHandler = connectionHandler,
    schema = resultsSchema,
    targetIds = sccsTargetId,
    outcomeIds = outcomeId
  )
  
  # add table
  reactable::reactable(
    data = sccsTableDiag %>%
      dplyr::select(
        "databaseName",
        "analysisId",
        "summaryValue"
      )
    ,
    columns = list(
      databaseName = reactable::colDef(
        name = 'Database'
      ),
      summaryValue = reactable::colDef(
        name = "Overall Diagnostic",
        style = function(value) {
          color <- 'orange'
          if(is.na(value)){
            color <- 'black'
          }else if(value == 'Pass'){
            color <- '#AFE1AF'
          }else if(value == 'Fail'){
            color <- '#E97451'
          }
          list(background = color)
        }
      )
    ), 
    defaultPageSize = defaultPageSize,
    highlight = TRUE, 
    striped = TRUE
  )
}
```

:::
  
::: {.column width="15%"}

> Fail: Study failed ASSURE diagnostics

> Pass: Study passed without warnings

> Number: Passed wth Number of warnings

:::
  
::::
  
```{r}
#| label: sccs estimation

if(runSCCS){
  sccsTable <- OhdsiReportGenerator::getSccsEstimation(
    connectionHandler = connectionHandler,
    schema = resultsSchema,
    targetIds = sccsTargetId,
    outcomeIds = outcomeId
  )
  
  sccsMeta <- OhdsiReportGenerator::getSccsMetaEstimation(
    connectionHandler = connectionHandler,
    schema = resultsSchema,
    targetIds = sccsTargetId,
    outcomeIds = outcomeId
  )
}
```

### Table Results
```{r}
#| label: sccs estimation table

if(runSCCS){
  reactable::reactable(
    data = sccsTable %>% 
      dplyr::select(
        'databaseName',
        'description',
        'calibratedRr',
        'calibratedCi95Lb',
        'calibratedCi95Ub',
        'calibratedP',
        'calibratedLogRr',
        'calibratedSeLogRr'
      ),
    columns = list(
      calibratedRr = reactable::colDef(
        format = reactable::colFormat(digits = 2)
      ),
      calibratedCi95Lb = reactable::colDef(
        format = reactable::colFormat(digits = 2)
      ),
      calibratedCi95Ub = reactable::colDef(
        format = reactable::colFormat(digits = 2)
      ),
      calibratedP = reactable::colDef(
        format = reactable::colFormat(digits = 2)
      ),
      calibratedLogRr = reactable::colDef(
        format = reactable::colFormat(digits = 2)
      ),
      calibratedSeLogRr = reactable::colDef(
        format = reactable::colFormat(digits = 2)
      )
    ),
    defaultPageSize = defaultPageSize,
    highlight = TRUE, 
    striped = TRUE
  )
}
```

### Plot Results
::: {.panel-tabset}
```{r}
#| label: sccs estimation plot
#| echo: false
#| results: 'asis'

if(runSCCS){
  analyses <- unique(sccsTable$description)
  analysisIds <- unique(sccsTable$analysisId)
  
  for (i in seq_along(analyses)) {
    analysis <- analyses[[i]]
    analysisId <- analysisIds[[i]]
    cat(paste0('\n\n#### ', analysis ,'\n\n'))
    
    p <- OhdsiReportGenerator::plotSccsEstimates(
      sccsData = sccsTable,
      sccsMeta = sccsMeta,
      targetName = targetName,
      selectedAnalysisId = analysisId
    )
    
    print(p)
  }
}

```
:::
  
:::
:::
  
  
# Prediction {.break-slides}
  
## Models
  
::: {style='font-size: 50%;'}

:::: {.panel-tabset .nav-pills}

### Model Summary

:::: {.columns}

::: {.column width="80%"}

```{r}
#| label: prediction
#| echo: false
#| results: 'asis'

# panel for outcomes
cat('\n::: {.panel-tabset .nav-pills}')
for(outcomeId in outcomeIds){
  
  outcomeName <- outcomeNames[which(outcomeIds == outcomeId)]
  cat(paste0('\n\n#### ', outcomeName, '\n'))
  
  pTable <- OhdsiReportGenerator::getPredictionPerformances(
    connectionHandler = connectionHandler,
    schema = resultsSchema
  )
  
 OhdsiReportGenerator::printReactable(
        data = pTable %>% 
dplyr::filter(
.data$developmentTargetId == !!targetId &
.data$developmentOutcomeId == !!outcomeId
) %>%
          dplyr::select(
            'modelDesignId',
            #'modelType',
            'developmentTargetName',
            'developmentOutcomeName',
            'developmentDatabase',
            'validationDatabase',
            'validationTimeAtRisk',
            'populationSize',
            'outcomeCount',
            'auroc',
            'eStatistic',
            'brierScore'
          ),
        columns = list(
          auroc = reactable::colDef(
            name = 'AUROC',
            format = reactable::colFormat(digits = 2)
          ),
          eStatistic = reactable::colDef(
            name = 'e-stat',
            format = reactable::colFormat(digits = 2)
          ),
          brierScore = reactable::colDef(
            name = 'brier',
            format = reactable::colFormat(digits = 2)
          ),
          populationSize = reactable::colDef(
            name = 'N'
          )
        ),
        defaultPageSize = defaultPageSize,
        highlight = TRUE, 
        striped = TRUE
      )
  
}
cat('\n:::') # outcome tabs

```

:::
  
::: {.column width="20%"}

> AUROC: A measure of model discrimination. 1 is best.  Probability a random person with the outcome has a higher risk than an random person without the outcome.

> e-stat: A measure of calibration.  Smaller is better. How accurate the predicted risks are.

> brier: Overall error. Smaller is better.

:::
  
::::
  
  
### Top Predictors
  
```{r}
#| label: predictors
#| echo: false
#| results: 'asis'

# panel for outcomes
cat('\n\n:::: {.panel-tabset .nav-pills}')
for(outcomeId in outcomeIds){
  
  outcomeName <- outcomeNames[which(outcomeIds == outcomeId)]
  cat(paste0('\n\n#### ', outcomeName, '\n\n'))
  
  topPreds <- OhdsiReportGenerator::getPredictionTopPredictors(
    connectionHandler = connectionHandler,
    schema = resultsSchema,
    targetIds = targetId,
    outcomeIds = outcomeId, # ToDo loop outcomes
    numberPredictors = 50
  )
  
  if(nrow(topPreds) >0 ){
    databases <- unique(topPreds$databaseName)
    
    cat('\n\n::: {.panel-tabset .nav-pills}')
    for(database in databases){
      
      cat(paste0('\n\n##### ', database))
      cat('\n\n')
      
      OhdsiReportGenerator::printReactable(
            data = topPreds %>% 
              dplyr::filter(.data$databaseName == !!database) %>%
              dplyr::mutate(
                tar = paste0(
                  '( ',.data$tarStartAnchor, ' + ', .data$tarStartDay, ' ) - ( ', 
                  .data$tarEndAnchor, ' + ', .data$tarEndDay, ' )'
                )
              ) %>%
              dplyr::select(
                'tar',
                'covariateName',
                'covariateValue',
                'withNoOutcomeCovariateMean',
                'withOutcomeCovariateMean',
                'standardizedMeanDiff'
              ),
            columns = list(
              standardizedMeanDiff = reactable::colDef(
                name = 'SMD',
                format = reactable::colFormat(digits = 2)
              ),
              withOutcomeCovariateMean = reactable::colDef(
                name = 'With Outcome',
                format = reactable::colFormat(digits = 2)
              ),
              withNoOutcomeCovariateMean = reactable::colDef(
                name = 'No Outcome',
                format = reactable::colFormat(digits = 2)
              ),
              covariateValue = reactable::colDef(
                name = 'Value',
                format = reactable::colFormat(digits = 2)
              ),
              
              
              covariateName = reactable::colDef(
                name = 'Predictor'
              ),
              tar = reactable::colDef(
                name = 'Time-at-risk'
              )
            ),
            defaultPageSize = defaultPageSize,
            highlight = TRUE, 
            striped = TRUE
          )
    }
    cat('\n\n:::')
  }
}
cat('\n\n::::')
```

::::
  
:::
  
# Conclusions {.break-slides}
  
## Executive Summary
  
```{r}
#| label: executive summary
#| echo: false
#| results: 'asis'

cat(paste(unlist(lapply(
  evaluationText, 
  function(txt){
    paste0('\n* ', txt)
  }
)), collapse = '\n'))


```

# Supplementary {.break-slides}

# Cohorts

```{r}
#| label: cohort definitions target
#| echo: false
#| results: 'asis'
# Target
cat(paste0('\n\n## Target ',targetName, ' {#sec-target}\n\n'))
```

> Full name: `r OhdsiReportGenerator::getCohortDefinitions(connectionHandler = connectionHandler, schema = resultsSchema, targetIds = params$targetId)$cohortName`

::: {.callout-note title="Cohort Definition"}
### Cohort Definition
```{r}
#| echo: false
#| results: 'asis'

json <- OhdsiReportGenerator::getCohortDefinitions(connectionHandler = connectionHandler, schema = resultsSchema, targetIds = params$targetId
)$json

markdown <- tryCatch(
  {CirceR::cohortPrintFriendly(json)}, 
  error = function(e) return('')
)
#markdown <- gsub('###', '####',markdown)
cat(markdown)

```

:::
  
```{r}
#| echo: false
#| results: 'asis'
# if subset is not null then add that here
if(!is.null(cmSubsetId)){
  mainCohort <- OhdsiReportGenerator::getCohortDefinitions(
  connectionHandler = connectionHandler, 
  schema = resultsSchema, 
  targetIds = params$targetId
  )$cohortName
  
  subCohort <- OhdsiReportGenerator::getCohortDefinitions(
  connectionHandler = connectionHandler, 
  schema = resultsSchema, 
  targetIds = targetId
  )$cohortName
  
  cat("\n\n::: {.callout-note title='Subset'}")
  cat('\n\n### Subset (not used in SCCS)')
  
  cat('\n\n')
  cat(substring(subCohort, nchar(mainCohort)+5, nchar(subCohort)))
  cat('\n\n:::')
}
  if(!is.null(sccsSubsetId)){
    mainCohort <- OhdsiReportGenerator::getCohortDefinitions(
  connectionHandler = connectionHandler, 
  schema = resultsSchema, 
  targetIds = params$targetId
  )$cohortName
  
  subCohort <- OhdsiReportGenerator::getCohortDefinitions(
  connectionHandler = connectionHandler, 
  schema = resultsSchema, 
  targetIds = sccsTargetId
  )$cohortName
  
  cat("\n\n::: {.callout-note title='Subset'}")
  cat('\n\n### Subset used in SCCS')
  
  cat('\n\n')
  cat(substring(subCohort, nchar(mainCohort)+5, nchar(subCohort)))
  cat('\n\n:::')
}

```



```{r}
#| label: outcomes
#| echo: false
#| results: 'asis'
# Outcome

for(i in 1:length(outcomeNames)){
  cat(paste0('\n\n## Outcome ',outcomeNames[i], ' {#sec-',OhdsiReportGenerator::removeSpaces(outcomeNames[i]),'}\n\n'))
  
  cat(paste0("\n\n> Full name: ", OhdsiReportGenerator::getCohortDefinitions(
  connectionHandler = connectionHandler, 
  schema = resultsSchema, 
  targetIds = outcomeIds[i])$cohortName))
  cat('\n\n::: {.callout-note title="Cohort Definition"}')
  cat('\n\n### Cohort Definition)\n')
  
  json <- OhdsiReportGenerator::getCohortDefinitions(
  connectionHandler = connectionHandler, 
  schema = resultsSchema, 
  targetIds = outcomeIds[i]
  )$json
  
  markdown <- tryCatch(
    {CirceR::cohortPrintFriendly(json)}, 
    error = function(e) return('')
  )
  cat(markdown)
  cat('\n\n:::')
}

```


```{r}
#| label: indication
#| echo: false
#| results: 'asis'
if(!is.null(indicationName)){
  # Indication
  # subCohort from the target code
    subCohort <- OhdsiReportGenerator::getCohortDefinitions(
  connectionHandler = connectionHandler, 
  schema = resultsSchema, 
  targetIds = targetId
  )$cohortName
  
  indicationId <- strsplit(
    strsplit(subCohort, '\\)')[[1]][1], 
    '\\('
  )[[1]][2]
  
  cat(
    paste0('\n\n## Indication ',indicationName, ' {#sec-indication}\n\n')
  )
  
  iName <- OhdsiReportGenerator::getCohortDefinitions(
  connectionHandler = connectionHandler, 
  schema = resultsSchema, 
  targetIds = indicationId
  )$cohortName
  
  cat(paste0("\n\n> Full name: ", iName))
  cat('\n\n::: {.callout-note title="Cohort Definition"}')
  cat("\n\n### Cohort Definition\n\n")
  
  json <- OhdsiReportGenerator::getCohortDefinitions(
  connectionHandler = connectionHandler, 
  schema = resultsSchema, 
  targetIds = indicationId
  )$json
  
  markdown <- tryCatch(
    {CirceR::cohortPrintFriendly(json)}, 
    error = function(e) return('')
  )
  cat(markdown)
  cat('\n\n:::')
}
```



```{r}
#| label: comparators
#| echo: false
#| results: 'asis'
# Comparator

for(i in 1:length(comparatorNames)){
  cat(paste0('\n\n## Comparator ',comparatorNames[i], ' {#sec-',OhdsiReportGenerator::removeSpaces(comparatorNames[i]),'}\n\n'))
  
  cat(paste0('\n\n> Full name:', OhdsiReportGenerator::getCohortDefinitions(
  connectionHandler = connectionHandler, 
  schema = resultsSchema, 
  targetIds = unlist(params$comparatorIds)[i])$cohortName))
  
  cat('\n\n::: {.callout-note title="Cohort Definition"}')
  cat('\n\n### Cohort Definition\n')
  
  json <- OhdsiReportGenerator::getCohortDefinitions(
  connectionHandler = connectionHandler, 
  schema = resultsSchema, 
  targetIds = unlist(params$comparatorIds)[i]
  )$json
  
  markdown <- tryCatch(
    {CirceR::cohortPrintFriendly(json)}, 
    error = function(e) return('')
  )
  cat(markdown)
  cat('\n\n:::')
  
  # if subset is not null then add that here
  if(!is.null(cmSubsetId)){
    mainCohort <- OhdsiReportGenerator::getCohortDefinitions(
  connectionHandler = connectionHandler, 
  schema = resultsSchema, 
  targetIds = unlist(params$comparatorIds)[i]
    )$cohortName
  
    subCohort <- OhdsiReportGenerator::getCohortDefinitions(
  connectionHandler = connectionHandler, 
  schema = resultsSchema, 
  targetIds = comparatorIds[i]
    )$cohortName
    
    cat("\n\n::: {.callout-note title='Cohort Definition'}")
    cat('\n\n### Subset (not used in SCCS)')
    
    cat('\n\n')
    cat(substring(subCohort, nchar(mainCohort)+5, nchar(subCohort)))
    cat('\n\n:::')
  }
}

```

# Protocol
